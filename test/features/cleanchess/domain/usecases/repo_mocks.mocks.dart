// Mocks generated by Mockito 5.3.2 from annotations
// in cleanchess/test/features/cleanchess/domain/usecases/repo_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cleanchess/core/errors/failure.dart' as _i6;
import 'package:cleanchess/core/utilities/empty.dart' as _i8;
import 'package:cleanchess/features/clean_chess/data/datasources/remote_oauth_data_source.dart'
    as _i2;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:oauth2/oauth2.dart' as _i7;

import 'repo_mocks.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRemoteOAuthDataSource_0 extends _i1.SmartFake
    implements _i2.RemoteOAuthDataSource {
  _FakeRemoteOAuthDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MLichessOAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMLichessOAuthRepository extends _i1.Mock
    implements _i4.MLichessOAuthRepository {
  @override
  _i2.RemoteOAuthDataSource get oAuthDataSource => (super.noSuchMethod(
        Invocation.getter(#oAuthDataSource),
        returnValue: _FakeRemoteOAuthDataSource_0(
          this,
          Invocation.getter(#oAuthDataSource),
        ),
        returnValueForMissingStub: _FakeRemoteOAuthDataSource_0(
          this,
          Invocation.getter(#oAuthDataSource),
        ),
      ) as _i2.RemoteOAuthDataSource);
  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> authenticate({
    required _i7.AuthorizationCodeGrant? grant,
    required String? stateVerifier,
    required String? redirectUri,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [],
          {
            #grant: grant,
            #stateVerifier: stateVerifier,
            #redirectUri: redirectUri,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #authenticate,
            [],
            {
              #grant: grant,
              #stateVerifier: stateVerifier,
              #redirectUri: redirectUri,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, String>>.value(
                _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #authenticate,
            [],
            {
              #grant: grant,
              #stateVerifier: stateVerifier,
              #redirectUri: redirectUri,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> gainAccessToken({
    required _i7.AuthorizationCodeGrant? grant,
    required Map<String, String>? params,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #gainAccessToken,
          [],
          {
            #grant: grant,
            #params: params,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #gainAccessToken,
            [],
            {
              #grant: grant,
              #params: params,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, String>>.value(
                _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #gainAccessToken,
            [],
            {
              #grant: grant,
              #params: params,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i8.Empty>> revokeToken(
          String? accessToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #revokeToken,
          [accessToken],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i8.Empty>>.value(
            _FakeEither_1<_i6.Failure, _i8.Empty>(
          this,
          Invocation.method(
            #revokeToken,
            [accessToken],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i8.Empty>>.value(
                _FakeEither_1<_i6.Failure, _i8.Empty>(
          this,
          Invocation.method(
            #revokeToken,
            [accessToken],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i8.Empty>>);
}
